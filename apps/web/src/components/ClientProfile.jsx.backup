import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import './ClientProfile.css';

const ClientProfile = ({ clientId, onBack }) => {
  const { user, getToken } = useAuth();
  const [client, setClient] = useState(null);
  const [sessions, setSessions] = useState([]);
  const [goals, setGoals] = useState([]);
  const [recommendations, setRecommendations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showAddGoal, setShowAddGoal] = useState(false);
  const [showAllSessions, setShowAllSessions] = useState(false);
  const [expandedSession, setExpandedSession] = useState(null);
  const [editingSession, setEditingSession] = useState(null);
  const [editSessionData, setEditSessionData] = useState(null);
  
  // New session form state
  const [newSession, setNewSession] = useState({
    start_time: '',
    duration_minutes: 60,
    treatment_codes: '97110',
    notes: {
      subjective: '',
      objective: '',
      assessment: '',
      plan: '',
      synthesized_summary: '',
      goals_addressed: [],
      next_session_recommendations: [],
      confidence_score: 0.0
    },
    main_notes: '',
    is_generating: false
  });

  // Audio recording state
  const [audioState, setAudioState] = useState({
    isRecording: false,
    isTranscribing: false,
    mediaRecorder: null,
    audioChunks: [],
    transcript: ''
  });

  // New goal state
  const [newGoal, setNewGoal] = useState({
    title: '',
    description: '',
    type: 'short_term'
  });

  const fetchClientData = async () => {
    try {
      const token = await getToken();
      
      const [profileRes, sessionsRes, goalsRes, recommendationsRes] = await Promise.all([
        fetch(`${import.meta.env.VITE_API_URL}/therapist/clients/${clientId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        }),
        fetch(`${import.meta.env.VITE_API_URL}/therapist/clients/${clientId}/sessions`, {
          headers: { 'Authorization': `Bearer ${token}` }
        }),
        fetch(`${import.meta.env.VITE_API_URL}/therapist/clients/${clientId}/goals`, {
          headers: { 'Authorization': `Bearer ${token}` }
        }),
        fetch(`${import.meta.env.VITE_API_URL}/therapist/clients/${clientId}/recommendations`, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
      ]);

      if (profileRes.ok) {
        const profileData = await profileRes.json();
        setClient(profileData);
      }

      if (sessionsRes.ok) {
        const sessionsData = await sessionsRes.json();
        setSessions(sessionsData.sessions || []);
      }

      if (goalsRes.ok) {
        const goalsData = await goalsRes.json();
        setGoals(goalsData.goals || []);
      }

      if (recommendationsRes.ok) {
        const recommendationsData = await recommendationsRes.json();
        setRecommendations(recommendationsData.recommendations || []);
      }

    } catch (err) {
      setError('Failed to load client data');
      console.error('Error fetching client data:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchClientData();
  }, [clientId]);

  const generateSOAPNote = async () => {
    const notesToUse = newSession.main_notes;
    
    if (!notesToUse.trim()) {
      alert('Please enter some notes or record audio before generating SOAP note');
      return;
    }

    setNewSession(prev => ({ ...prev, is_generating: true }));

    try {
      const formData = new FormData();
      formData.append('transcript', notesToUse);
      formData.append('client_age', client.dob ? new Date().getFullYear() - new Date(client.dob).getFullYear() : 0);
      formData.append('diagnosis', client.diagnosis_codes ? client.diagnosis_codes.join(', ') : 'Not specified');
      formData.append('short_term_goals', JSON.stringify(goals.filter(g => g.type === 'short_term').map(g => g.title)));
      formData.append('long_term_goals', JSON.stringify(goals.filter(g => g.type === 'long_term').map(g => g.title)));
      formData.append('session_activities', JSON.stringify([newSession.main_notes]));
      formData.append('observations', '');
      formData.append('time_in', newSession.start_time || '');
      formData.append('time_out', '');
      formData.append('units', newSession.duration_minutes || 0);
      // Handle treatment_codes - could be string or array
      const treatmentCodes = newSession.treatment_codes || [];
      const treatmentCodesArray = Array.isArray(treatmentCodes) ? treatmentCodes : [treatmentCodes];
      formData.append('treatment_codes', JSON.stringify(treatmentCodesArray));

      const response = await fetch(`${import.meta.env.VITE_AI_SERVICE_URL}/generate-soap-note`, {
        method: 'POST',
        body: formData
      });

      if (response.ok) {
        const result = await response.json();
        const soapNote = result.soap_note; // AI service returns {soap_note: {...}}
        setNewSession(prev => ({ 
          ...prev, 
          notes: { 
            ...prev.notes,
            subjective: soapNote.subjective || '',
            objective: soapNote.objective || '',
            assessment: soapNote.assessment || '',
            plan: soapNote.plan || '',
            synthesized_summary: soapNote.synthesized_summary || '',
            goals_addressed: soapNote.goals_addressed || [],
            next_session_recommendations: soapNote.next_session_recommendations || [],
            confidence_score: soapNote.confidence_score || 0.0
          },
          is_generating: false
        }));
      } else {
        const errorText = await response.text();
        alert(`Failed to generate SOAP note: ${response.status} ${errorText}`);
        setNewSession(prev => ({ ...prev, is_generating: false }));
      }
    } catch (error) {
      alert(`Error generating SOAP note: ${error.message}`);
      setNewSession(prev => ({ ...prev, is_generating: false }));
    }
  };

  const handleSaveSession = async () => {
    try {
      const token = await getToken();
      
      if (!newSession.start_time) {
        alert('Please enter the start time');
        return;
      }
      
      if (!newSession.duration_minutes || newSession.duration_minutes <= 0) {
        alert('Please enter a valid duration');
        return;
      }
      
      if (!newSession.notes.subjective && !newSession.notes.objective) {
        alert('Please fill in at least the Subjective or Objective section');
        return;
      }

      const today = new Date().toISOString().slice(0, 10);
      const startDateTime = new Date(`${today}T${newSession.start_time}:00`);

      const body = {
        client_id: parseInt(clientId),
        start_time: startDateTime.toISOString(),
        duration_minutes: parseInt(newSession.duration_minutes),
        treatment_codes: [newSession.treatment_codes],
        notes: {
          type: 'soap',
          soap: newSession.notes,
          goals_checked: goals.map(g => ({ id: g.id, title: g.title, addressed: true })),
          treatment_codes: [newSession.treatment_codes]
        }
      };

      console.log('Saving session with body:', body);

      const resp = await fetch(`${import.meta.env.VITE_API_URL}/therapist/clients/${clientId}/sessions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      if (resp.ok) {
        setNewSession({
          start_time: '',
          duration_minutes: 60,
          treatment_codes: '97110',
          notes: {
            subjective: '',
            objective: '',
            assessment: '',
            plan: '',
            synthesized_summary: '',
            goals_addressed: [],
            next_session_recommendations: [],
            confidence_score: 0.0
          },
          main_notes: '',
          is_generating: false
        });
        
        setAudioState({
          isRecording: false,
          isTranscribing: false,
          mediaRecorder: null,
          audioChunks: [],
          transcript: ''
        });
        
        await fetchClientData();
        alert('Session saved successfully!');
      } else {
        const errorText = await resp.text();
        console.error('Save session failed:', resp.status, errorText);
        alert(`Failed to save session: ${resp.status} ${errorText}`);
      }
    } catch (e) {
      console.error('Save session error:', e);
      alert('Failed to save session: ' + e.message);
    }
  };

  const handleAddGoal = async () => {
    if (newGoal.title.trim()) {
    try {
      const token = await getToken();
        const response = await fetch(`${import.meta.env.VITE_API_URL}/therapist/clients/${clientId}/goals`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
          body: JSON.stringify({
            title: newGoal.title,
            description: newGoal.description,
            type: newGoal.type
          })
        });

        if (response.ok) {
          setNewGoal({ title: '', description: '', type: 'short_term' });
          setShowAddGoal(false);
          await fetchClientData();
        } else {
          const errorText = await response.text();
          alert(`Failed to add goal: ${response.status} ${errorText}`);
        }
      } catch (error) {
        alert('Failed to add goal');
      }
    }
  };

  const generateRecommendations = async () => {
    try {
      const token = await getToken();
      const response = await fetch(`${import.meta.env.VITE_API_URL}/ai/recommend-exercises`, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              },
        body: JSON.stringify({
          client_age: client.dob ? new Date().getFullYear() - new Date(client.dob).getFullYear() : 0,
          diagnosis: client.diagnosis_codes ? client.diagnosis_codes.join(', ') : 'Not specified',
          goals: goals.map(g => g.title)
        })
      });

      if (response.ok) {
        const result = await response.json();
        setRecommendations({
          exercise_recommendations: result.exercise_recommendations || '',
          homework_plan: result.homework_plan || ''
        });
      } else {
        const errorText = await response.text();
        alert(`Failed to generate recommendations: ${response.status} ${errorText}`);
      }
    } catch (error) {
      alert('Failed to generate recommendations');
    }
  };

  const handleEditSession = (session) => {
    setEditingSession(session.id);
    setEditSessionData({
      start_time: session.start_time,
      duration_minutes: session.duration_minutes,
      treatment_codes: Array.isArray(session.treatment_codes) ? session.treatment_codes.join(', ') : session.treatment_codes,
      notes: session.notes && session.notes.length > 0 ? {
        soap: session.notes[0].soap || {}
      } : { soap: {} }
    });
  };

  const handleSaveEditSession = async (sessionId) => {
    try {
      const token = await getToken();
      const resp = await fetch(`${import.meta.env.VITE_API_URL}/therapist/clients/${clientId}/sessions/${sessionId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(editSessionData)
      });

      if (resp.ok) {
        setEditingSession(null);
        setEditSessionData(null);
        await fetchClientData();
        alert('Session updated successfully!');
      } else {
        const errorText = await resp.text();
        alert(`Failed to update session: ${resp.status} ${errorText}`);
      }
    } catch (e) {
      alert('Failed to update session');
    }
  };

  const handleDeleteSession = async (sessionId) => {
    if (window.confirm('Are you sure you want to delete this session? This cannot be undone.')) {
      try {
      const token = await getToken();
        const resp = await fetch(`${import.meta.env.VITE_API_URL}/therapist/clients/${clientId}/sessions/${sessionId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (resp.ok) {
          await fetchClientData();
          alert('Session deleted successfully!');
        } else {
          const errorText = await resp.text();
          alert(`Failed to delete session: ${resp.status} ${errorText}`);
        }
      } catch (e) {
        alert('Failed to delete session');
      }
    }
  };

  // Audio recording functions
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      const audioChunks = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
        await transcribeAudio(audioBlob);
        stream.getTracks().forEach(track => track.stop());
      };

      setAudioState(prev => ({
        ...prev,
        isRecording: true,
        mediaRecorder,
        audioChunks
      }));

      mediaRecorder.start();
    } catch (error) {
      console.error('Error starting recording:', error);
    }
  };

  const stopRecording = () => {
    if (audioState.mediaRecorder && audioState.isRecording) {
      audioState.mediaRecorder.stop();
      setAudioState(prev => ({ ...prev, isRecording: false }));
    }
  };

  const transcribeAudio = async (audioBlob) => {
    try {
      setAudioState(prev => ({ ...prev, isTranscribing: true }));
      
      const formData = new FormData();
      formData.append('audio_file', audioBlob, 'recording.wav');

      const response = await fetch(`${import.meta.env.VITE_AI_SERVICE_URL}/transcribe-audio`, {
        method: 'POST',
        body: formData
      });

      if (response.ok) {
        const result = await response.json();
        setAudioState(prev => ({ 
          ...prev, 
          transcript: result.transcript,
          isTranscribing: false 
        }));
        
        setNewSession(prev => ({ 
          ...prev, 
          main_notes: result.transcript 
        }));
      } else {
        const errorText = await response.text();
        console.error(`Failed to transcribe audio: ${response.status} ${errorText}`);
        setAudioState(prev => ({ ...prev, isTranscribing: false }));
      }
    } catch (error) {
      console.error('Error transcribing audio:', error);
      setAudioState(prev => ({ ...prev, isTranscribing: false }));
    }
  };

  const calculateAge = (dob) => {
    if (!dob) return 'N/A';
    return `${new Date().getFullYear() - new Date(dob).getFullYear()} years`;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString();
  };

  const formatTime = (timeString) => {
    return new Date(timeString).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  if (loading) {
    return (
      <div className="client-profile-container" style={{ backgroundColor: '#F8F9FA', minHeight: '100vh', padding: '24px 0', position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000, overflow: 'auto' }}>
        <div className="container" style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 24px' }}>
          <div className="profile-header" style={{ backgroundColor: 'white', borderRadius: '12px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', marginBottom: '32px', padding: '32px', textAlign: 'center' }}>
            <div className="loading" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', minHeight: '200px', color: '#6C757D', fontSize: '18px' }}>
              <div className="spinner" style={{ width: '48px', height: '48px', border: '4px solid #F8F9FA', borderTop: '4px solid #20B2AA', borderRadius: '50%', animation: 'spin 1s linear infinite', margin: '0 auto 16px' }}></div>
              <p>Loading client profile...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error || !client) {
    return (
      <div className="client-profile-container" style={{ backgroundColor: '#F8F9FA', minHeight: '100vh', padding: '24px 0', position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000, overflow: 'auto' }}>
        <div className="container" style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 24px' }}>
          <div className="profile-header" style={{ backgroundColor: 'white', borderRadius: '12px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', marginBottom: '32px', padding: '32px', textAlign: 'center' }}>
            <div className="error" style={{ color: '#FF6B6B', fontSize: '18px' }}>{error || 'Client not found'}</div>
            <button onClick={onBack} style={{ marginTop: '16px', padding: '8px 16px', backgroundColor: '#20B2AA', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer' }}>
              Back to Dashboard
            </button>
          </div>
        </div>
      </div>
    );
  }

    return (
    <div className="client-profile-container" style={{ backgroundColor: '#F8F9FA', minHeight: '100vh', padding: '24px 0', position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000, overflow: 'auto' }}>
      <div className="container" style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 24px' }}>
        {/* Header Section */}
        <div className="profile-header" style={{ backgroundColor: 'white', borderRadius: '12px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', marginBottom: '32px', padding: '32px' }}>
          <button onClick={onBack} style={{ padding: '8px 16px', backgroundColor: 'white', border: '2px solid #20B2AA', borderRadius: '8px', color: '#20B2AA', cursor: 'pointer', fontSize: '14px', fontWeight: '500', display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '24px' }}>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z" fill="currentColor"/>
            </svg>
            Back to Dashboard
          </button>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '24px' }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '80px', height: '80px', background: 'linear-gradient(135deg, #20B2AA, #48D1CC)', borderRadius: '50%', color: 'white', fontSize: '32px', fontWeight: '600' }}>
              {client.name ? client.name.charAt(0).toUpperCase() : 'C'}
      </div>
            <div>
              <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#343A40', margin: '0 0 8px 0' }}>{client.name}</h1>
              <div style={{ display: 'flex', gap: '16px', fontSize: '16px', color: '#6C757D' }}>
                <span>{calculateAge(client.dob)} years old</span>
                <span>{client.school || 'School not specified'}</span>
              </div>
              <div style={{ marginTop: '8px' }}>
                <span style={{ display: 'inline-block', padding: '4px 12px', backgroundColor: '#dcfce7', color: '#16a34a', borderRadius: '20px', fontSize: '12px', fontWeight: '500', textTransform: 'uppercase' }}>
                  {client.status}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Profile Details Card - Moved to Top */}
        <div style={{ backgroundColor: 'white', borderRadius: '12px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', padding: '24px', marginBottom: '24px' }}>
          <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#343A40', margin: '0 0 16px 0', display: 'flex', alignItems: 'center', gap: '8px', paddingBottom: '12px', borderBottom: '2px solid #20B2AA' }}>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z" fill="#20B2AA"/>
            </svg>
            Profile Details
          </h2>
          
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '16px' }}>
            <div>
              <label style={{ fontSize: '12px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>Email</label>
              <div style={{ fontSize: '14px', color: '#343A40' }}>{client.email}</div>
            </div>
            <div>
              <label style={{ fontSize: '12px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>Date of Birth</label>
              <div style={{ fontSize: '14px', color: '#343A40' }}>{new Date(client.dob).toLocaleDateString()}</div>
            </div>
            <div>
              <label style={{ fontSize: '12px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>School</label>
              <div style={{ fontSize: '14px', color: '#343A40' }}>{client.school || 'Not specified'}</div>
            </div>
            <div>
              <label style={{ fontSize: '12px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>Diagnosis</label>
              <div style={{ fontSize: '14px', color: '#343A40' }}>
                {client.diagnosis_codes ? client.diagnosis_codes.join(', ') : 'Not specified'}
              </div>
            </div>
            <div>
              <label style={{ fontSize: '12px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>Payer ID</label>
              <div style={{ fontSize: '14px', color: '#343A40' }}>{client.payer_id || 'Not specified'}</div>
            </div>
            <div>
              <label style={{ fontSize: '12px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>Created</label>
              <div style={{ fontSize: '14px', color: '#343A40' }}>{formatDate(client.created_at)}</div>
            </div>
          </div>
        </div>

        {/* Session Creation - Professional Style Matching Saved Sessions */}
        <div style={{ backgroundColor: 'white', borderRadius: '12px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', padding: '24px', marginBottom: '24px' }}>
          <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#343A40', margin: '0 0 16px 0', display: 'flex', alignItems: 'center', gap: '8px', paddingBottom: '12px', borderBottom: '2px solid #20B2AA' }}>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z" fill="#20B2AA"/>
            </svg>
            New Session
          </h2>

          {/* Session Details Form */}
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '16px', marginBottom: '24px' }}>
            <div>
              <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px', textTransform: 'uppercase' }}>Start Time</label>
              <input
                type="datetime-local"
                value={newSession.start_time}
                onChange={(e) => setNewSession(prev => ({ ...prev, start_time: e.target.value }))}
                style={{ width: '100%', padding: '8px', border: '1px solid #E2E8F0', borderRadius: '4px', fontSize: '13px' }}
              />
            </div>
            
            <div>
              <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px', textTransform: 'uppercase' }}>Duration (min)</label>
              <input
                type="number"
                value={newSession.duration_minutes}
                onChange={(e) => setNewSession(prev => ({ ...prev, duration_minutes: parseInt(e.target.value) || 0 }))}
                style={{ width: '100%', padding: '8px', border: '1px solid #E2E8F0', borderRadius: '4px', fontSize: '13px' }}
                min="15"
                step="15"
              />
            </div>
            
            <div>
              <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px', textTransform: 'uppercase' }}>Treatment Codes</label>
              <input
                type="text"
                value={newSession.treatment_codes}
                onChange={(e) => setNewSession(prev => ({ ...prev, treatment_codes: e.target.value }))}
                style={{ width: '100%', padding: '8px', border: '1px solid #E2E8F0', borderRadius: '4px', fontSize: '13px' }}
                placeholder="e.g., 97110"
              />
            </div>
          </div>

          {/* Session Notes Input */}
          <div style={{ marginBottom: '24px' }}>
            <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '8px', textTransform: 'uppercase' }}>Session Notes</label>
            <textarea
              value={newSession.main_notes}
              onChange={(e) => setNewSession(prev => ({ ...prev, main_notes: e.target.value }))}
              style={{ width: '100%', padding: '12px', border: '1px solid #E2E8F0', borderRadius: '6px', resize: 'vertical', fontSize: '13px', minHeight: '100px' }}
              placeholder="Enter session notes or record audio..."
            />
          </div>

          {/* Audio Recording Controls */}
          <div style={{ display: 'flex', gap: '12px', marginBottom: '24px', flexWrap: 'wrap' }}>
            <button
              onClick={audioState.isRecording ? stopRecording : startRecording}
              style={{
                padding: '8px 16px',
                backgroundColor: audioState.isRecording ? '#FF6B6B' : '#20B2AA',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                fontSize: '13px'
              }}
            >
              {audioState.isRecording ? (
                <>
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="6" y="6" width="12" height="12" fill="currentColor"/>
                  </svg>
                  Stop Recording
                </>
              ) : (
                <>
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="12" cy="12" r="10" fill="currentColor"/>
                  </svg>
                  Start Recording
                </>
              )}
            </button>

            <button
              onClick={generateSOAPNote}
              disabled={newSession.is_generating || !newSession.main_notes.trim()}
              style={{
                padding: '8px 16px',
                backgroundColor: '#20B2AA',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                opacity: (newSession.is_generating || !newSession.main_notes.trim()) ? 0.6 : 1,
                fontSize: '13px'
              }}
            >
              {newSession.is_generating ? (
                <>
                  <div style={{ width: '14px', height: '14px', border: '2px solid transparent', borderTop: '2px solid white', borderRadius: '50%', animation: 'spin 1s linear infinite' }}></div>
                  Generating...
                </>
              ) : (
                <>
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" fill="currentColor"/>
                  </svg>
                  Generate SOAP Note
                </>
              )}
            </button>
          </div>

          {/* Audio Status */}
          {audioState.isTranscribing && (
            <div style={{ padding: '12px', backgroundColor: '#fff3cd', borderRadius: '6px', marginBottom: '16px', display: 'flex', alignItems: 'center', gap: '8px' }}>
              <div style={{ width: '16px', height: '16px', border: '2px solid transparent', borderTop: '2px solid #856404', borderRadius: '50%', animation: 'spin 1s linear infinite' }}></div>
              <span style={{ color: '#856404', fontSize: '13px' }}>Transcribing audio...</span>
            </div>
          )}

          {/* SOAP Note Form - Compact Grid */}
          <div style={{ marginBottom: '24px' }}>
            <h4 style={{ fontSize: '14px', fontWeight: '600', color: '#343A40', margin: '0 0 12px 0' }}>SOAP Note Form</h4>
            
            {newSession.is_generating ? (
              <div style={{ textAlign: 'center', padding: '20px', color: '#6C757D' }}>
                <div style={{ marginBottom: '12px' }}>Generating SOAP note...</div>
                <div style={{ width: '40px', height: '40px', border: '4px solid #E2E8F0', borderTop: '4px solid #20B2AA', borderRadius: '50%', animation: 'spin 1s linear infinite', margin: '0 auto' }}></div>
              </div>
            ) : (
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '16px' }}>
                <div>
                  <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px', textTransform: 'uppercase' }}>S - Subjective</label>
                  <textarea
                    value={newSession.notes.subjective}
                    onChange={(e) => setNewSession(prev => ({ ...prev, notes: { ...prev.notes, subjective: e.target.value } }))}
                    style={{ width: '100%', padding: '8px', border: '1px solid #E2E8F0', borderRadius: '4px', resize: 'vertical', fontSize: '13px' }}
                    rows={3}
                    placeholder="What the client reported..."
                  />
                </div>
                
                <div>
                  <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px', textTransform: 'uppercase' }}>O - Objective</label>
                  <textarea
                    value={newSession.notes.objective}
                    onChange={(e) => setNewSession(prev => ({ ...prev, notes: { ...prev.notes, objective: e.target.value } }))}
                    style={{ width: '100%', padding: '8px', border: '1px solid #E2E8F0', borderRadius: '4px', resize: 'vertical', fontSize: '13px' }}
                    rows={3}
                    placeholder="What you observed..."
                  />
                </div>
                
                <div>
                  <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px', textTransform: 'uppercase' }}>A - Assessment</label>
                  <textarea
                    value={newSession.notes.assessment}
                    onChange={(e) => setNewSession(prev => ({ ...prev, notes: { ...prev.notes, assessment: e.target.value } }))}
                    style={{ width: '100%', padding: '8px', border: '1px solid #E2E8F0', borderRadius: '4px', resize: 'vertical', fontSize: '13px' }}
                    rows={3}
                    placeholder="Your assessment..."
                  />
                </div>
                
                <div>
                  <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px', textTransform: 'uppercase' }}>P - Plan</label>
                  <textarea
                    value={newSession.notes.plan}
                    onChange={(e) => setNewSession(prev => ({ ...prev, notes: { ...prev.notes, plan: e.target.value } }))}
                    style={{ width: '100%', padding: '8px', border: '1px solid #E2E8F0', borderRadius: '4px', resize: 'vertical', fontSize: '13px' }}
                    rows={3}
                    placeholder="Next steps..."
                  />
                </div>
              </div>
            )}
          </div>

          {/* Session Notes Preview - Professional Display */}
          <div style={{ marginBottom: '24px' }}>
            <h4 style={{ fontSize: '14px', fontWeight: '600', color: '#343A40', margin: '0 0 12px 0' }}>Session Notes Preview</h4>
            <div style={{ fontSize: '13px', color: '#343A40', lineHeight: '1.6', padding: '16px', backgroundColor: '#F8F9FA', borderRadius: '8px', border: '1px solid #E2E8F0' }}>
              {newSession.notes.subjective && (
                <div style={{ marginBottom: '12px' }}>
                  <strong style={{ color: '#20B2AA' }}>Subjective:</strong> {newSession.notes.subjective}
                </div>
              )}
              {newSession.notes.objective && (
                <div style={{ marginBottom: '12px' }}>
                  <strong style={{ color: '#20B2AA' }}>Objective:</strong> {newSession.notes.objective}
                </div>
              )}
              {newSession.notes.assessment && (
                <div style={{ marginBottom: '12px' }}>
                  <strong style={{ color: '#20B2AA' }}>Assessment:</strong> {newSession.notes.assessment}
                </div>
              )}
              {newSession.notes.plan && (
                <div style={{ marginBottom: '12px' }}>
                  <strong style={{ color: '#20B2AA' }}>Plan:</strong> {newSession.notes.plan}
                </div>
              )}
              {newSession.notes.synthesized_summary && (
                <div style={{ marginBottom: '12px' }}>
                  <strong style={{ color: '#20B2AA' }}>Summary:</strong> {newSession.notes.synthesized_summary}
                </div>
              )}
              {newSession.notes.goals_addressed && newSession.notes.goals_addressed.length > 0 && (
                <div style={{ marginBottom: '12px' }}>
                  <strong style={{ color: '#20B2AA' }}>Goals Addressed:</strong> {Array.isArray(newSession.notes.goals_addressed) ? newSession.notes.goals_addressed.join(', ') : newSession.notes.goals_addressed}
                </div>
              )}
              {newSession.notes.next_session_recommendations && newSession.notes.next_session_recommendations.length > 0 && (
                <div style={{ marginBottom: '0' }}>
                  <strong style={{ color: '#20B2AA' }}>Next Session:</strong> {Array.isArray(newSession.notes.next_session_recommendations) ? newSession.notes.next_session_recommendations.join(', ') : newSession.notes.next_session_recommendations}
                </div>
              )}
              {(!newSession.notes.subjective && !newSession.notes.objective && !newSession.notes.assessment && !newSession.notes.plan && !newSession.notes.synthesized_summary && (!newSession.notes.goals_addressed || newSession.notes.goals_addressed.length === 0) && (!newSession.notes.next_session_recommendations || newSession.notes.next_session_recommendations.length === 0)) && (
                <div style={{ fontStyle: 'italic', color: '#6C757D' }}>No session notes recorded yet. Use the form above to add notes or generate with AI.</div>
              )}
            </div>
            
            {/* AI Confidence Score */}
            {newSession.notes.confidence_score && newSession.notes.confidence_score > 0 && (
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginTop: '12px', padding: '8px', backgroundColor: 'white', borderRadius: '6px', border: '1px solid #E2E8F0' }}>
                <span style={{ fontSize: '12px', fontWeight: '600', color: '#6C757D' }}>AI Confidence:</span>
                <span style={{ fontSize: '14px', fontWeight: '600', color: '#20B2AA' }}>
                  {(newSession.notes.confidence_score * 100).toFixed(0)}%
                </span>
              </div>
            )}
          </div>

          {/* Save Button */}
          <button
            onClick={handleSaveSession}
            disabled={!newSession.start_time || (!newSession.notes.subjective && !newSession.notes.objective)}
            style={{
              padding: '10px 20px',
              backgroundColor: '#20B2AA',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '600',
              opacity: (!newSession.start_time || (!newSession.notes.subjective && !newSession.notes.objective)) ? 0.6 : 1
            }}
          >
            Save Session
          </button>
        </div>

        {/* Session History */}
        <div style={{ backgroundColor: 'white', borderRadius: '12px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', padding: '24px', marginBottom: '24px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px', paddingBottom: '12px', borderBottom: '2px solid #20B2AA' }}>
            <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#343A40', margin: 0, display: 'flex', alignItems: 'center', gap: '8px' }}>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M13 2.05V4.05C17.39 4.59 20.5 8.58 19.96 12.97C19.5 16.61 16.64 19.5 13 19.93V21.93C18.5 21.38 22.5 16.5 21.95 11C21.5 6.25 17.73 2.5 13 2.03V2.05Z" fill="#20B2AA"/>
              </svg>
              Session History ({sessions.length})
            </h2>
            {sessions.length > 5 && (
              <button onClick={() => setShowAllSessions(!showAllSessions)} style={{ padding: '6px 12px', backgroundColor: 'white', border: '2px solid #20B2AA', borderRadius: '6px', color: '#20B2AA', fontSize: '12px', cursor: 'pointer' }}>
                {showAllSessions ? 'Show Less' : 'Show All'}
              </button>
            )}
          </div>
          
          <div style={{ maxHeight: showAllSessions ? 'none' : '400px', overflowY: showAllSessions ? 'visible' : 'auto' }}>
            {sessions.length > 0 ? (
              (showAllSessions ? sessions : sessions.slice(0, 5)).map((session, index) => (
                <div key={session.id || index} style={{ marginBottom: '12px', border: '1px solid #E2E8F0', borderRadius: '8px', overflow: 'hidden' }}>
                  {/* Session Header - Clickable */}
                  <div 
                    onClick={() => setExpandedSession(expandedSession === session.id ? null : session.id)}
                    style={{ 
                      padding: '12px', 
                      backgroundColor: '#F8F9FA', 
                      cursor: 'pointer',
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      borderBottom: expandedSession === session.id ? '1px solid #E2E8F0' : 'none',
                      transition: 'background-color 150ms ease-in-out'
                    }}
                  >
                    <div>
                      <div style={{ fontWeight: '500', color: '#343A40', marginBottom: '4px' }}>Session {sessions.length - index}</div>
                      <div style={{ fontSize: '12px', color: '#6C757D' }}>
                        {formatDate(session.created_at)} • {formatTime(session.start_time)} • {session.duration_minutes} min
                      </div>
                      {session.treatment_codes && (
                        <div style={{ fontSize: '10px', color: '#6C757D', marginTop: '2px' }}>
                          Codes: {Array.isArray(session.treatment_codes) ? session.treatment_codes.join(', ') : session.treatment_codes}
                </div>
              )}
            </div>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ transform: expandedSession === session.id ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 150ms ease-in-out' }}>
                      <path d="M7 10L12 15L17 10H7Z" fill="#6C757D"/>
                    </svg>
              </div>

                  {/* Expanded Session Details */}
                  {expandedSession === session.id && (
                    <div style={{ padding: '16px', backgroundColor: 'white' }}>
                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', gap: '12px', marginBottom: '16px' }}>
                        <div>
                          <label style={{ fontSize: '10px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>Start Time</label>
                          {editingSession === session.id ? (
                  <input 
                              type="time"
                              value={editSessionData?.start_time ? new Date(editSessionData.start_time).toTimeString().slice(0, 5) : ''}
                              onChange={(e) => setEditSessionData(prev => ({ ...prev, start_time: e.target.value }))}
                              style={{ width: '100%', padding: '4px', border: '1px solid #20B2AA', borderRadius: '4px', fontSize: '12px' }}
                  />
                ) : (
                            <div style={{ fontSize: '12px', color: '#343A40' }}>{formatTime(session.start_time)}</div>
                )}
              </div>
                        <div>
                          <label style={{ fontSize: '10px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>Duration</label>
                          {editingSession === session.id ? (
                  <input 
                              type="number"
                              value={editSessionData?.duration_minutes || ''}
                              onChange={(e) => setEditSessionData(prev => ({ ...prev, duration_minutes: e.target.value }))}
                              style={{ width: '100%', padding: '4px', border: '1px solid #20B2AA', borderRadius: '4px', fontSize: '12px' }}
                              min="15"
                              step="15"
                  />
                ) : (
                            <div style={{ fontSize: '12px', color: '#343A40' }}>{session.duration_minutes} min</div>
                )}
              </div>
                        <div>
                          <label style={{ fontSize: '10px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>Treatment Codes</label>
                          {editingSession === session.id ? (
                            <input 
                              type="text"
                              value={editSessionData?.treatment_codes || ''}
                              onChange={(e) => setEditSessionData(prev => ({ ...prev, treatment_codes: e.target.value }))}
                              style={{ width: '100%', padding: '4px', border: '1px solid #20B2AA', borderRadius: '4px', fontSize: '12px' }}
                              placeholder="e.g., 97110"
                            />
                          ) : (
                            <div style={{ fontSize: '12px', color: '#343A40' }}>
                              {Array.isArray(session.treatment_codes) ? session.treatment_codes.join(', ') : (session.treatment_codes || 'N/A')}
                            </div>
                          )}
                        </div>
                  />
                ) : (
                            <div style={{ fontSize: '12px', color: '#343A40' }}>
                              {Array.isArray(session.treatment_codes) ? session.treatment_codes.join(', ') : (session.treatment_codes || 'N/A')}
                            </div>
                )}
              </div>
                        <div>
                          <label style={{ fontSize: '10px', fontWeight: '600', color: '#6C757D', textTransform: 'uppercase' }}>Status</label>
                          {editingSession === session.id ? (
                            <select
                              value={editSessionData?.note_status || 'draft'}
                              onChange={(e) => setEditSessionData(prev => ({ ...prev, note_status: e.target.value }))}
                              style={{ width: '100%', padding: '4px', border: '1px solid #20B2AA', borderRadius: '4px', fontSize: '12px' }}
                            >
                              <option value="draft">Draft</option>
                              <option value="in_progress">In Progress</option>
                              <option value="signed">Signed</option>
                            </select>
                          ) : (
                            <div style={{ fontSize: '12px', color: '#343A40' }}>{session.note_status}</div>
                          )}
                        </div>
                      </div>

                      {/* SOAP Notes Display/Edit */}
                      {editingSession === session.id ? (
                        /* Edit Mode */
                        <div style={{ marginBottom: '16px' }}>
                          <h4 style={{ fontSize: '14px', fontWeight: '600', color: '#343A40', margin: '0 0 12px 0' }}>Edit Session Details</h4>
                          
                          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '12px', marginBottom: '16px' }}>
                            <div>
                              <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Start Time</label>
                              <input 
                                type="datetime-local"
                                value={editSessionData?.start_time ? new Date(editSessionData.start_time).toISOString().slice(0, 16) : ''}
                                onChange={(e) => setEditSessionData(prev => ({ ...prev, start_time: e.target.value }))}
                                style={{ width: '100%', padding: '6px', border: '2px solid #E2E8F0', borderRadius: '4px', fontSize: '12px' }}
                              />
                            </div>
                            <div>
                              <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Duration (min)</label>
                              <input 
                                type="number"
                                value={editSessionData?.duration_minutes || ''}
                                onChange={(e) => setEditSessionData(prev => ({ ...prev, duration_minutes: e.target.value }))}
                                style={{ width: '100%', padding: '6px', border: '2px solid #E2E8F0', borderRadius: '4px', fontSize: '12px' }}
                                min="15"
                                step="15"
                              />
                            </div>
                            <div>
                              <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Treatment Codes</label>
                              <input 
                                type="text"
                                value={editSessionData?.treatment_codes || ''}
                                onChange={(e) => setEditSessionData(prev => ({ ...prev, treatment_codes: e.target.value }))}
                                style={{ width: '100%', padding: '6px', border: '2px solid #E2E8F0', borderRadius: '4px', fontSize: '12px' }}
                                placeholder="e.g., 97110, 97165"
                              />
                            </div>
                          </div>

                          {/* SOAP Notes Edit */}
                          {session.notes && session.notes.length > 0 && session.notes[0].soap && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>
                              <div>
                                <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Subjective</label>
                                <textarea
                                  value={editSessionData?.notes?.soap?.subjective || ''}
                                  onChange={(e) => setEditSessionData(prev => ({ 
                                    ...prev, 
                                    notes: { 
                                      ...prev.notes, 
                                      soap: { ...prev.notes?.soap, subjective: e.target.value }
                                    }
                                  }))}
                                  style={{ width: '100%', padding: '8px', border: '2px solid #E2E8F0', borderRadius: '4px', resize: 'vertical', fontSize: '12px' }}
                                  rows={3}
                                />
                              </div>
                              <div>
                                <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Objective</label>
                                <textarea
                                  value={editSessionData?.notes?.soap?.objective || ''}
                                  onChange={(e) => setEditSessionData(prev => ({ 
                                    ...prev, 
                                    notes: { 
                                      ...prev.notes, 
                                      soap: { ...prev.notes?.soap, objective: e.target.value }
                                    }
                                  }))}
                                  style={{ width: '100%', padding: '8px', border: '2px solid #E2E8F0', borderRadius: '4px', resize: 'vertical', fontSize: '12px' }}
                                  rows={3}
                                />
                      </div>
                              <div>
                                <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Assessment</label>
                                <textarea
                                  value={editSessionData?.notes?.soap?.assessment || ''}
                                  onChange={(e) => setEditSessionData(prev => ({ 
                                    ...prev, 
                                    notes: { 
                                      ...prev.notes, 
                                      soap: { ...prev.notes?.soap, assessment: e.target.value }
                                    }
                                  }))}
                                  style={{ width: '100%', padding: '8px', border: '2px solid #E2E8F0', borderRadius: '4px', resize: 'vertical', fontSize: '12px' }}
                                  rows={3}
                                />
                      </div>
                              <div>
                                <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Plan</label>
                                <textarea
                                  value={editSessionData?.notes?.soap?.plan || ''}
                                  onChange={(e) => setEditSessionData(prev => ({ 
                                    ...prev, 
                                    notes: { 
                                      ...prev.notes, 
                                      soap: { ...prev.notes?.soap, plan: e.target.value }
                                    }
                                  }))}
                                  style={{ width: '100%', padding: '8px', border: '2px solid #E2E8F0', borderRadius: '4px', resize: 'vertical', fontSize: '12px' }}
                                  rows={3}
                                />
                      </div>
                    </div>
        )}
                          </div>
                                            ) : (
                        /* View Mode - Professional Note Display */
                        session.notes && session.notes.length > 0 && session.notes[0].soap && (
                          <div style={{ marginBottom: '16px' }}>
                            <h4 style={{ fontSize: '14px', fontWeight: '600', color: '#343A40', margin: '0 0 12px 0' }}>Session Notes</h4>
                            <div style={{ fontSize: '13px', color: '#343A40', lineHeight: '1.6', padding: '16px', backgroundColor: '#F8F9FA', borderRadius: '8px', border: '1px solid #E2E8F0' }}>
                              {session.notes[0].soap.subjective && (
                                <div style={{ marginBottom: '12px' }}>
                                  <strong style={{ color: '#20B2AA' }}>Subjective:</strong> {session.notes[0].soap.subjective}
                      </div>
                    )}
                              {session.notes[0].soap.objective && (
                                <div style={{ marginBottom: '12px' }}>
                                  <strong style={{ color: '#20B2AA' }}>Objective:</strong> {session.notes[0].soap.objective}
                  </div>
                              )}
                              {session.notes[0].soap.assessment && (
                                <div style={{ marginBottom: '12px' }}>
                                  <strong style={{ color: '#20B2AA' }}>Assessment:</strong> {session.notes[0].soap.assessment}
              </div>
                              )}
                              {session.notes[0].soap.plan && (
                                <div style={{ marginBottom: '0' }}>
                                  <strong style={{ color: '#20B2AA' }}>Plan:</strong> {session.notes[0].soap.plan}
              </div>
            )}
                              {(!session.notes[0].soap.subjective && !session.notes[0].soap.objective && !session.notes[0].soap.assessment && !session.notes[0].soap.plan) && (
                                <div style={{ fontStyle: 'italic', color: '#6C757D' }}>No session notes recorded</div>
                              )}
          </div>
                          </div>
                        )
                      )}

                      {/* Actions */}
                      <div style={{ display: 'flex', gap: '8px', justifyContent: 'flex-end' }}>
                        {editingSession === session.id ? (
                          <>
                            <button 
                              onClick={(e) => {
                                e.stopPropagation();
                                setEditingSession(null);
                                setEditSessionData(null);
                              }}
                              style={{ padding: '6px 12px', backgroundColor: 'white', border: '2px solid #6C757D', borderRadius: '4px', color: '#6C757D', fontSize: '12px', cursor: 'pointer' }}
                            >
                              Cancel
                            </button>
                            <button 
                              onClick={(e) => {
                                e.stopPropagation();
                                handleSaveEditSession(session.id);
                              }}
                              style={{ padding: '6px 12px', backgroundColor: '#20B2AA', color: 'white', border: 'none', borderRadius: '4px', fontSize: '12px', cursor: 'pointer' }}
                            >
                              Save
                            </button>
                          </>
                        ) : (
                          <>
                            <button 
                              onClick={(e) => {
                                e.stopPropagation();
                                handleEditSession(session);
                              }}
                              style={{ padding: '6px 12px', backgroundColor: 'white', border: '2px solid #20B2AA', borderRadius: '4px', color: '#20B2AA', fontSize: '12px', cursor: 'pointer' }}
                            >
                              Edit
                            </button>
                          </>
                        )}
                        <button 
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteSession(session.id);
                          }}
                          style={{ padding: '6px 12px', backgroundColor: '#FF6B6B', color: 'white', border: 'none', borderRadius: '4px', fontSize: '12px', cursor: 'pointer' }}
                        >
                          Delete
                        </button>
            </div>
              </div>
            )}
          </div>
              ))
            ) : (
              <div style={{ textAlign: 'center', padding: '20px', color: '#6C757D' }}>No sessions yet</div>
            )}
                      </div>
                      </div>



        {/* Goals and Recommendations */}
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', gap: '24px' }}>
          {/* Goals Card */}
          <div style={{ backgroundColor: 'white', borderRadius: '12px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', padding: '24px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px', paddingBottom: '12px', borderBottom: '2px solid #20B2AA' }}>
              <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#343A40', margin: 0, display: 'flex', alignItems: 'center', gap: '8px' }}>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z" fill="#20B2AA"/>
                </svg>
                Goals
              </h2>
              <button onClick={() => setShowAddGoal(true)} style={{ padding: '6px 12px', backgroundColor: '#20B2AA', color: 'white', border: 'none', borderRadius: '6px', fontSize: '12px', cursor: 'pointer' }}>
                Add Goal
              </button>
                </div>
            
            <div>
              {goals.length > 0 ? (
                goals.slice(0, 5).map((goal, index) => (
                  <div key={goal.id || index} style={{ padding: '12px', backgroundColor: '#F8F9FA', borderRadius: '8px', marginBottom: '8px' }}>
                    <div style={{ fontWeight: '500', color: '#343A40', marginBottom: '4px' }}>{goal.title}</div>
                    <div style={{ fontSize: '12px', color: '#6C757D' }}>{goal.type}</div>
                </div>
                ))
              ) : (
                <div style={{ textAlign: 'center', padding: '20px', color: '#6C757D' }}>No goals yet</div>
              )}
              </div>
                </div>

          {/* Recommendations */}
          <div style={{ backgroundColor: 'white', borderRadius: '12px', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', padding: '24px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px', paddingBottom: '12px', borderBottom: '2px solid #20B2AA' }}>
              <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#343A40', margin: 0, display: 'flex', alignItems: 'center', gap: '8px' }}>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z" fill="#20B2AA"/>
                </svg>
                Recommendations
              </h2>
              <button onClick={generateRecommendations} style={{ padding: '6px 12px', backgroundColor: '#20B2AA', color: 'white', border: 'none', borderRadius: '6px', fontSize: '12px', cursor: 'pointer' }}>
                Generate
              </button>
              </div>
              
            <div>
              <div style={{ marginBottom: '12px' }}>
                <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Exercise Recommendations</label>
                    <textarea 
                  value={recommendations.exercise_recommendations || ''}
                  onChange={(e) => setRecommendations(prev => ({ ...prev, exercise_recommendations: e.target.value }))}
                  style={{ width: '100%', padding: '8px', border: '2px solid #E2E8F0', borderRadius: '6px', resize: 'vertical' }}
                  placeholder="AI-generated exercise recommendations will appear here..."
                  rows={3}
                    />
                  </div>
              <div>
                <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Homework Plan</label>
                    <textarea 
                  value={recommendations.homework_plan || ''}
                  onChange={(e) => setRecommendations(prev => ({ ...prev, homework_plan: e.target.value }))}
                  style={{ width: '100%', padding: '8px', border: '2px solid #E2E8F0', borderRadius: '6px', resize: 'vertical' }}
                  placeholder="AI-generated homework plan will appear here..."
                  rows={3}
                    />
                  </div>
                  </div>
                  </div>
                </div>

        {/* Add Goal Modal */}
        {showAddGoal && (
          <div style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0,0,0,0.5)', zIndex: 10001, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '24px', maxWidth: '500px', width: '100%', margin: '24px' }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
                <h3 style={{ margin: 0, fontSize: '20px', fontWeight: '600', color: '#343A40' }}>Add New Goal</h3>
                <button onClick={() => setShowAddGoal(false)} style={{ background: 'none', border: 'none', fontSize: '24px', cursor: 'pointer', color: '#6C757D' }}>×</button>
              </div>
              
              <div style={{ marginBottom: '16px' }}>
                <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Goal Title</label>
                <input
                  type="text"
                  value={newGoal.title}
                  onChange={(e) => setNewGoal(prev => ({ ...prev, title: e.target.value }))}
                  style={{ width: '100%', padding: '8px', border: '2px solid #E2E8F0', borderRadius: '6px' }}
                  placeholder="Enter goal title"
                />
              </div>
              
              <div style={{ marginBottom: '16px' }}>
                <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Description</label>
                <textarea
                  value={newGoal.description}
                  onChange={(e) => setNewGoal(prev => ({ ...prev, description: e.target.value }))}
                  style={{ width: '100%', padding: '8px', border: '2px solid #E2E8F0', borderRadius: '6px', resize: 'vertical' }}
                  placeholder="Enter goal description"
                  rows={3}
                />
            </div>
              
              <div style={{ marginBottom: '24px' }}>
                <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#6C757D', marginBottom: '4px' }}>Type</label>
                <select
                  value={newGoal.type}
                  onChange={(e) => setNewGoal(prev => ({ ...prev, type: e.target.value }))}
                  style={{ width: '100%', padding: '8px', border: '2px solid #E2E8F0', borderRadius: '6px' }}
                >
                  <option value="short_term">Short Term</option>
                  <option value="long_term">Long Term</option>
                </select>
          </div>
              
              <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>
                <button onClick={() => setShowAddGoal(false)} style={{ padding: '8px 16px', backgroundColor: 'white', border: '2px solid #6C757D', borderRadius: '6px', color: '#6C757D', cursor: 'pointer' }}>
                  Cancel
                </button>
                <button onClick={handleAddGoal} style={{ padding: '8px 16px', backgroundColor: '#20B2AA', color: 'white', border: 'none', borderRadius: '6px', cursor: 'pointer' }}>
                  Add Goal
                </button>
                    </div>
                    </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ClientProfile;
